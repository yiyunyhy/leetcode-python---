#1.
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def comb(k, n, start):
            if k == 1:
                if n < 10:
                    return [[n]]
                return []
            res = []
            for i in range(start + 1, min((n+1)//2, 10)):
                for j in comb(k-1, n-i, i):
                    res.append([i]+j)
            return res
        return comb(k,n,0)
#2.
class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        result = list()
        self._combinationSum3(n, 1, list(), result, k)
        return result
    
    def _combinationSum3(self, target, index, path, res, k):
        if target == 0 and len(path) == k:
            res.append(path)
            return
        if path and target < path[-1]:
            return
        for i in range(index,10):
            self._combinationSum3(target-i, i+1,path+[i], res, k)
