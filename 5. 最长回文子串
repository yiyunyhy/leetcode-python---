#1.
class Solution:
    def longestPalindrome(self, s: str) -> str:
        palindrome = ''
        
        for i in range(len(s)):
            len1 = len(self.getlongestpalindrome(s, i, i))
            
            if len1 > len(palindrome):
                palindrome = self.getlongestpalindrome(s, i, i)
                
            len2 = len(self.getlongestpalindrome(s, i, i+1))
            
            if len2 > len(palindrome):
                palindrome = self.getlongestpalindrome(s, i, i+1)
                
        return palindrome
    
    def getlongestpalindrome(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1 : r]
#2.
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        self.res = ""
        def helper(i,j):
            while i >= 0 and j < n and s[i] == s[j]:
                i -= 1
                j += 1
            if len(self.res) < j - i -1 :
                self.res = s[i+1:j]
        for i in range(n):
            helper(i,i)
            helper(i, i+1)
        return self.res

#3.
class Solution:
    def longestPalindrome(self, s: str) -> str:
        if not s:
            return ""
        max_len = 1
        n = len(s)
        start = 0
        for i in range(1,n):
            even = s[i-max_len:i+1]
            odd = s[i - max_len-1:i+1]
            #print(even,odd)
            if i - max_len - 1 >= 0 and odd == odd[::-1]:
                start = i - max_len - 1
                max_len += 2
            elif i - max_len >=0 and even == even[::-1]:
                start = i - max_len
                max_len += 1
                
        #print(start,max_len)
        return s[start: start+max_len]

#4.
class Solution: 
    def longestPalindrome(self, s: str) -> str: 
        if not s : 
            return "" 
        res = "" 
        n = len(s) 
        dp = [[0] * n for _ in range(n)] 
        max_len = float("-inf") 
        #print(dp) 
        for i in range(n): 
            for j in range(i,-1,-1): 
                if s[i] == s[j] and (i - j < 2 or dp[i-1][j+1]): 
                    dp[i][j] = 1 
                if dp[i][j] and max_len < i - j + 1: 
                    #print("i,j",i,j) 
                    res = s[j:i+1] 
                    max_len = i - j + 1 
        return re
